
########################################### Downloading ########################
dir.create("data")

anos <- lubridate::year(lubridate::today())
meses <- lubridate::month(lubridate::today()) - 1

# Combina os arquivos das duas categorias
arquivos_combinados <- list(
  list(tipo = "Empresas", nomes = c("Empresas", "Estabelecimentos", "Socios"),
       indices = 0:9),
  list(tipo = "Outros", nomes = c("Cnaes", "Motivos", "Municipios", "Naturezas",
                                  "Paises", "Qualificacoes", "Simples"),
       indices = NULL)
)

# Loop único
for (item in arquivos_combinados) {
  tipo <- item$tipo
  nomes <- item$nomes
  indices <- item$indices
  
  for (nome in nomes) {
    if (!is.null(indices)) {
      for (indice in indices) {
        curl::curl_download(
          paste0("https://arquivos.receitafederal.gov.br/",
                 "dados/cnpj/dados_abertos_cnpj/",
                 anos, "-", meses, "/", nome, indice, ".zip"),
          destfile = paste0("data/", anos, "_", meses, "_", nome, indice, ".zip")
        )
      }
    } else {
      curl::curl_download(
        paste0("https://arquivos.receitafederal.gov.br/",
               "dados/cnpj/dados_abertos_cnpj/",
               anos, "-", meses, "/", nome, ".zip"),
        destfile = paste0("data/", anos, "_", meses, "_", nome, ".zip")
      )
    }
  }
}



# adicionar trycath erro parecido com comexstat
# tentar verificar se é possivel criar pasta por ano para o exercicio ficar ano mes


################################################## Simples #####################


# Fazendo conexão com o banco de dados

conexao <- RPostgres::dbConnect(RPostgres::Postgres(),
                                dbname = "##########",
                                host = "#########",
                                port = "##########",
                                user = "###########",
                                password = "###########")

RPostgres::dbListTables(conexao)

schema_name <- "ministerio_fazenda_cnpj"

table_name <- "cnpj_simples"

DBI::dbSendQuery(conexao, paste0("CREATE SCHEMA IF NOT EXISTS ", schema_name))


############ Estabelecimentos

setwd("data")

cnpj_simples_endereco <- fs::dir_ls(glob = paste0("*Simples", "*.zip"))

cnpj_simples <-
  readr::read_csv2(cnpj_simples_endereco,
                   locale = readr::locale(encoding = "latin1",
                                          decimal_mark = ","),
                   col_names = F,
                   col_types = readr::cols(
                     "X3" = readr::col_date(format = "%Y%m%d"),
                     "X4" = readr::col_date(format = "%Y%m%d"),
                     "X6" = readr::col_date(format = "%Y%m%d"),
                     "X7" = readr::col_date(format = "%Y%m%d"),
                     .default = readr::col_character()
                     ))


# Nomeando Colunas

cnpj_simples <- cnpj_simples |> 
  dplyr::rename(cnpj_basico = 1,
                opcao_simples = 2,
                data_opcao_simples = 3,
                data_exclusao_simples = 4,
                opcao_mei = 5,
                data_opcao_mei = 6,
                data_exclusao_mei = 7
                )

# writing PostgreSQL

RPostgres::dbWriteTable(
  conexao,
  name = DBI::Id(schema = schema_name, table = table_name),
  value = cnpj_simples,
  row.names = FALSE,
  overwrite = TRUE
  )

RPostgres::dbDisconnect(conexao)
