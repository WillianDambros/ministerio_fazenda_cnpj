
########################################### Downloading ########################
dir.create("data")

anos <- lubridate::year(lubridate::today())
meses <- lubridate::month(lubridate::today()) - 1

# Combina os arquivos das duas categorias
arquivos_combinados <- list(
  list(tipo = "Empresas", nomes = c("Empresas", "Estabelecimentos", "Socios"),
       indices = 0:9),
  list(tipo = "Outros", nomes = c("Cnaes", "Motivos", "Municipios", "Naturezas",
                                  "Paises", "Qualificacoes", "Simples"),
       indices = NULL)
)

# Loop único
for (item in arquivos_combinados) {
  tipo <- item$tipo
  nomes <- item$nomes
  indices <- item$indices
  
  for (nome in nomes) {
    if (!is.null(indices)) {
      for (indice in indices) {
        curl::curl_download(
          paste0("https://arquivos.receitafederal.gov.br/",
                 "dados/cnpj/dados_abertos_cnpj/",
                 anos, "-", meses, "/", nome, indice, ".zip"),
          destfile = paste0("data/", anos, "_", meses, "_", nome, indice, ".zip")
        )
      }
    } else {
      curl::curl_download(
        paste0("https://arquivos.receitafederal.gov.br/",
               "dados/cnpj/dados_abertos_cnpj/",
               anos, "-", meses, "/", nome, ".zip"),
        destfile = paste0("data/", anos, "_", meses, "_", nome, ".zip")
      )
    }
  }
}



# adicionar trycath erro parecido com comexstat
# tentar verificar se é possivel criar pasta por ano para o exercicio ficar ano mes

#################################################### Decodificador #############

cnpj_decodificador_enderecos <-
fs::dir_ls(glob = "*Cnaes*.zip|*Motivos*.zip|*Municipios*.zip|*Naturezas*.zip|
           |*Paises*.zip|*Qualificacoes*.zip")

cnpj_decodificador_lista <- vector(mode = "list",
                             length = length(cnpj_decodificador_enderecos))

for (i in seq_along(cnpj_decodificador_enderecos)){
  
  cnpj_decodificador_lista[[i]] <-
    readr::read_csv2(cnpj_decodificador_enderecos[i],
                     locale = readr::locale(encoding = "latin1",
                                            decimal_mark = ","),
                     col_names = F,
                     col_types = readr::cols(.default = readr::col_character()
                     ))
                     
}

cnpj_decodificador_lista[[1]] <- cnpj_decodificador_lista[[1]] |>
  dplyr::rename(cnaes = 1, cnaes_decodificado = 2)

cnpj_decodificador_lista[[2]] <- cnpj_decodificador_lista[[2]] |>
  dplyr::rename(motivos_situacao_cadastral = 1,
                motivos_situacao_cadastral_decodificado = 2)

cnpj_decodificador_lista[[3]] <- cnpj_decodificador_lista[[3]] |>
  dplyr::rename(municipios = 1, municipios_decodificado = 2)

cnpj_decodificador_lista[[4]] <- cnpj_decodificador_lista[[4]] |>
  dplyr::rename(natureza_juridica = 1, natureza_juridica_decodificado = 2)

cnpj_decodificador_lista[[5]] <- cnpj_decodificador_lista[[5]] |>
  dplyr::rename(paises = 1, paises_decodificado = 2)

cnpj_decodificador_lista[[6]] <- cnpj_decodificador_lista[[6]] |>
  dplyr::rename(qualificacao_responsavel = 1,
                qualificacao_responsavel_decodificado = 2)


################################################## Estabelecimentos ############


# Fazendo conexão com o banco de dados

conexao <- RPostgres::dbConnect(RPostgres::Postgres(),
                                dbname = "########",
                                host = "##########",
                                port = "#########",
                                user = "##########",
                                password = "############")

RPostgres::dbListTables(conexao)

schema_name <- "ministerio_fazenda_cnpj"

table_name <- "cnpj_estabelecimentos"

DBI::dbSendQuery(conexao, paste0("CREATE SCHEMA IF NOT EXISTS ", schema_name))


############ Estabelecimentos

setwd("data")

cnpj_arquivos <- 0:9

# Loop para ler arquivos por vez
for (h in cnpj_arquivos) {
  
  cnpj_estabelecimentos_endereco <-
    fs::dir_ls(glob = paste0("*Estabelecimentos", h,"*.zip"))
  
  cnpj_estabelecimentos_lista <- vector(
    mode = "list", length = length(cnpj_estabelecimentos_endereco))
  
  for(i in seq_along(cnpj_estabelecimentos_endereco)){
    
    cnpj_estabelecimentos_lista[[i]] <-
      readr::read_csv2(cnpj_estabelecimentos_endereco,
                       locale = readr::locale(encoding = "latin1",
                                              decimal_mark = ","),
                       col_names = F,
                       col_types = readr::cols(
                         "X7" = readr::col_date(format = "%Y%m%d"),
                         "X11" = readr::col_date(format = "%Y%m%d"),
                         "X30" = readr::col_date(format = "%Y%m%d"),
                         .default = readr::col_character()
                         )) |>
      dplyr::filter(X20 == "MT")
    }
  
  # Nomeando Colunas
  cnpj_estabelecimentos <- cnpj_estabelecimentos_lista |>
    dplyr::bind_rows() |>
    dplyr::rename(cnpj_basico = 1,
                  cnpj_ordem = 2,
                  cnpj_dv = 3,
                  matriz_filial = 4,
                  nome_fantasia = 5,
                  situacao_cadastral = 6,
                  data_situacao_cadastral = 7,
                  motivos_situacao_cadastral = 8,
                  nome_cidade_exterior = 9,
                  paises = 10,
                  data_inicio_atividades =11,
                  cnaes = 12,
                  cnaes_fiscal_secundaria = 13,
                  tipo_logradouro = 14,
                  logradouro = 15,
                  numero = 16,
                  complemento = 17,
                  bairro = 18,
                  cep = 19,
                  uf = 20,
                  municipios = 21,
                  ddd1 = 22,
                  telefone1 = 23,
                  ddd2 = 24,
                  telefone2 = 25,
                  ddd_fax = 26,
                  fax = 27,
                  correio_eletronico = 28,
                  situacao_especial = 29,
                  data_situacao_especial = 30)
  
  # Decodificado Dicionario
  for(j in seq_along(cnpj_decodificador_lista)){
    tryCatch({
      cnpj_estabelecimentos <- cnpj_estabelecimentos |>
        dplyr::left_join(cnpj_decodificador_lista[[j]])
    }, error = function(err) {warning("file could not be join")})
    }
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |>
    dplyr::select(- motivos_situacao_cadastral,
                  - paises)
  # Decodificando Manual
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |>
    dplyr::mutate(matriz_filial =
                    dplyr::case_when(
                      matriz_filial == "1" ~ "Matriz",
                      matriz_filial == "2" ~ "Filial"), .keep = "unused"
                  )
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |>
    dplyr::mutate(situacao_cadastral =
                    dplyr::case_when(
                      situacao_cadastral == "01" ~ "Nula",
                      situacao_cadastral == "02" ~ "Ativa",
                      situacao_cadastral == "03" ~ "Suspensa",
                      situacao_cadastral == "04" ~ "Inapta",
                      situacao_cadastral == "08" ~ "Baixada"), .keep = "unused"
                  ) #pensar em talvez juntar cnpj, dentre outros como cnae e atribuir latitude e longitude
  
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |> dplyr::mutate(
    telefone_1 = dplyr::case_when(
      is.na(ddd1) & is.na(telefone1) ~ NA_character_,
      TRUE ~ paste0("(", ddd1, ") ", telefone1)
      ),.keep = "unused"
    )
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |> dplyr::mutate(
    telefone_2 = dplyr::case_when(
      is.na(ddd2) & is.na(telefone2) ~ NA_character_,
      TRUE ~ paste0("(", ddd2, ") ", telefone2)
    ),.keep = "unused"
  )
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |> dplyr::mutate(
    fax = dplyr::case_when(
      is.na(ddd_fax) & is.na(fax) ~ NA_character_,
      TRUE ~ paste0("(", ddd_fax, ") ", fax)
    ),.keep = "unused"
  )
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |>
    dplyr::mutate(
      cnpj_formatado = sprintf(
        "%s.%s.%s/%s-%s",
        substr(cnpj_basico, 1, 2), # Primeiros dois dígitos
        substr(cnpj_basico, 3, 5), # Próximos três dígitos
        substr(cnpj_basico, 6, 8), # Últimos três dígitos do básico
        cnpj_ordem,               # Quatro dígitos da ordem
        cnpj_dv                  # Dois dígitos verificadores
      )
    )
  
  
  cnpj_estabelecimentos <- cnpj_estabelecimentos |>
    dplyr::mutate(
      cnae_grande_grupamento_novocaged =
        dplyr::case_when(
          stringr::str_sub(cnaes, 1, 2) %in% c("01", "02", "03") ~ "Agropécuaria",
          stringr::str_sub(cnaes, 1, 2) %in% c("45", "46", "47") ~ "Comércio",
          stringr::str_sub(cnaes, 1, 2) %in% c("41", "42", "43") ~ "Construção",
          
          stringr::str_sub(cnaes, 1, 2) %in% c("05", "06", "07", "08", "09", "10",
                                               "11", "12", "13", "14", "15", "16",
                                               "17", "18", "19", "20", "21", "22",
                                               "23", "24", "25", "26", "27", "28",
                                               "29", "30","31", "32", "33", "34",
                                               "35", "36", "37", "38","39") ~ "Indústria",
          
          stringr::str_sub(cnaes, 1, 2) %in% c("49", "50", "51", "52", "53", "55",
                                               "56", "58", "59", "60", "61", "62",
                                               "63", "64", "65", "66", "68", "69",
                                               "70", "71", "72", "73", "74", "75",
                                               "77", "78", "79", "80", "81", "82",
                                               "84", "85", "86", "87", "88","90",
                                               "91", "92", "93", "94", "95", "96",
                                               "97", "99") ~ "Serviço"
          ))
  
  # writing PostgreSQL
  if (h == 0) {
    RPostgres::dbWriteTable(
      conexao,
      name = DBI::Id(schema = schema_name, table = table_name),
      value = cnpj_estabelecimentos,
      row.names = FALSE,
      overwrite = TRUE
      )
    } else {
      # Inserir os dados na tabela existente (append = TRUE)
      RPostgres::dbWriteTable(
        conexao,
        name = DBI::Id(schema = schema_name, table = table_name),
        value = cnpj_estabelecimentos,
        row.names = FALSE,
        append = TRUE
      )
      }

  cnpj_estabelecimentos |> dplyr::glimpse()
  print(h) 
} #fim do loop

RPostgres::dbDisconnect(conexao)
